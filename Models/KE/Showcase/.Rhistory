table(rowCounts(MSWeb)) %>%
data.frame()
table(rowCounts(MSWeb)) %>%
data.frame() %>%
mutate(total_purchases = sum(Freq)) %>%
mutate(Var1 = as.integer(Var1)) %>%
filter(Var1>=10) %>%
mutate(purchases_10 = sum(Freq)) %>%
summarise(purchases_10 = mean(purchases_10),
total_purchases = mean(total_purchases)) %>%
mutate(prop = purchases_10/total_purchases)
MSWeb10 <- MSWeb[rowCounts(MSWeb)>=10,]
dim(MSWeb10)
summary(rowCounts(MSWeb10))
es <-
evaluationScheme(data = MSWeb10,
method = "cross-validation",
train = 0.8,
k = 5,
given = -1)
algorithms <- list(
popular = list(name = "POPULAR", param = NULL),
ubcf = list(name = "UBCF", param = NULL),
ibcf = list(name = "IBCF", param = NULL),
ar = list(name = "AR", param = NULL),
hybrid = list(name = "HYBRID", param =
list(recommenders = list(
popular = list(name = "POPULAR", param = NULL),
ubcf = list(name = "UBCF", param = NULL),
ibcf = list(name = "IBCF", param = NULL)
)
)
)
)
system.time({
ev_list <-
evaluate(x = es,
method = algorithms,
type = "topNList",
n = c(1,3,5,10))
})
names(ev_list)
plot(ev_list, legend="topleft", annotate=TRUE, main="ROC Curves of each model")
plot(ev_list[[1]], annotate=TRUE, main="ROC Curve of Popularity Model")
plot(x = ev_list, y = "prec/rec", annotate=TRUE, legend="topleft")
install.packages("pracma")
ev_list[[1]]
names(ev_list[[1]])
rownames(ev_list[[1]])
names(ev_list)
avg(ev_list[[3]])
ev_list
names(ev_list)
avg(ev_list[[3]])
avg(ev_list[[3]])["precision","recall"]
avg(ev_list[[3]]["precision","recall"])
avg(ev_list[[3]][c("precision","recall")])
avg(ev_list[[3]])[c("precision","recall")]
avg(ev_list[[3]])
avg(ev_list[[3]])[,c("precision","recall")]
avg(ev_list[[3]])[,"precision"]
avg(ev_list[[3]])[,c("precision","recall")]
names(ev_list)
avg(ev_list[[3]])
avg(ev_list[[3]]) %>%
tibble()
avg(ev_list[[3]]) %>%
tibble()
avg(ev_list[[3]]) %>%
data.frame()
ibcf_eval <- avg(ev_list[[3]]) %>%
data.frame() %>%
arrange(recall)
ibcf_eval
pracma::trapz(x = ibcf_eval$recall, y = ibcf_eval$recall)
names(ev_list)
ev_list$popular
avg(ev_list$popular)
ibcf_eval <- avg(ev_list$ibcf) %>%
data.frame() %>%
arrange(recall)
pracma::trapz(x = ibcf_eval$recall, y = ibcf_eval$recall)
pop_eval <- avg(ev_list$popular) %>%
data.frame() %>%
arrange(recall)
pracma::trapz(x = ibcf_eval$recall, y = ibcf_eval$recall)
pracma::trapz(x = pop_eval$recall, y = pop_eval$recall)
MSWeb[1:10,1:10]
MSWeb[[1]]
View(MSWeb)
MSWeb@data@data
View(MSWeb@data@data)
?MSWeb
which(rownames(MSWeb)=="^1$")
grepl(x = rownames(MSWeb), pattern = "^1$")
which(grepl(x = rownames(MSWeb), pattern = "^1$"))
hist(rowCounts(MSWeb)
hist(rowCounts(MSWeb))
as(MSWeb[1:2,], "list")
hist(rowCounts(MSWeb))
summary(rowCounts(MSWeb))
summary(rowCounts(MSWeb))
hist(rowCounts(MSWeb))
table(MSWeb)
table(rownames(MSWeb))
table(rowCounts(MSWeb))
table(rownames(MSWeb))
table(rownames(MSWeb),rowCounts(MSWeb))
as(MSWeb,"list")
as(MSWeb, "list") %>%
data.frame()
as(MSWeb, "list") %>%
tibble()
as(MSWeb, "list") %>%
tibble(names(.))
length(rownames(MSWeb))
as(MSWeb, "list") %>%
tibble(user_id = names(.))
as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".")
as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".")
as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase) %>%
filter(n>1)
as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
ms_purchases <- as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
ms_purchases %>%
filter(n>1)
movies <- as(MovieLense, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
movies
as(MovieLense,"list")
as(MovieLense,"list")[[1]]
movies %>%
filter(n>1)
movies <- as(MovieLense, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(rating = ".")
movies
as(MovieLense,"list") %>%
tibble()
as(MovieLense,"list") %>%
tibble() %>%
head(1)
as(MovieLense,"list") %>%
tibble() %>%
head(1) %>%
unnest()
as(MovieLense,"list")[[1]] %>%
data.frame()
as(MovieLense,"list")[[1]] %>%
data.frame() %>%
rownames_to_column()
as(MovieLense,"list")[[1]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname)
as(MovieLense,"list")[[1]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname) %>%
filter(n>1)
as(MovieLense,"list")
as(MovieLense,"list") %>%
tibble()
as(MovieLense,"list") %>%
tibble() %>%
mutate(len = length(.))
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".")
as(MovieLense,"list") %>%
tibble()
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".")
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map(.x = ratings, .f = length))
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map(.x = ratings, .f = length),
len = unnest(len))
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map(.x = ratings, .f = length))
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map_int(.x = ratings, .f = length))
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map_int(.x = ratings, .f = length),
idx = row_number())
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map_int(.x = ratings, .f = length),
idx = row_number()) %>%
arrange(desc(len))
as(MovieLense,"list")[[405]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname) %>%
filter(n>1)
as(MovieLense,"list")[[405]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname)
as(MovieLense,"list")[[405]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname) %>%
arrange(desc(n))
ke_pop = Recommender(data = MSWeb10, method = "POPULAR")
predict(object = ke_pop)
knitr::opts_chunk$set(echo = TRUE)
library(recommenderlab)
library(tidyverse)
data("MSWeb")
data("MovieLense")
data("Jester5k")
class(MSWeb)
class(MovieLense)
class(Jester5k)
dim(MSWeb)
rownames(MSWeb)[1:10] #user ids
colnames(MSWeb)[1:10] #product names
ms_purchases <- as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(recommenderlab)
library(tidyverse)
data("MSWeb")
data("MovieLense")
data("Jester5k")
class(MSWeb)
class(MovieLense)
class(Jester5k)
dim(MSWeb)
rownames(MSWeb)[1:10] #user ids
colnames(MSWeb)[1:10] #product names
ms_purchases <- as(MSWeb, "list") %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
rename(purchase = ".") %>%
count(user_id,purchase)
ms_purchases %>%
filter(n>1)
as(MovieLense,"list") %>%
tibble() %>%
rename(ratings = ".") %>%
mutate(len = map_int(.x = ratings, .f = length),
idx = row_number()) %>%
arrange(desc(len))
as(MovieLense,"list")[[405]] %>%
data.frame() %>%
rownames_to_column() %>%
count(rowname) %>%
arrange(desc(n))
summary(rowCounts(MSWeb))
which(grepl(x = rownames(MSWeb), pattern = "^1$"))
as(MSWeb[1:2,], "list")
hist(rowCounts(MSWeb))
table(rowCounts(MSWeb)) %>%
data.frame()
table(rowCounts(MSWeb)) %>%
data.frame() %>%
mutate(total_purchases = sum(Freq)) %>%
mutate(Var1 = as.integer(Var1)) %>%
filter(Var1>=10) %>%
mutate(purchases_10 = sum(Freq)) %>%
summarise(purchases_10 = mean(purchases_10),
total_purchases = mean(total_purchases)) %>%
mutate(prop = purchases_10/total_purchases)
MSWeb10 <- MSWeb[rowCounts(MSWeb)>=10,]
dim(MSWeb10)
summary(rowCounts(MSWeb10))
es <-
evaluationScheme(data = MSWeb10,
method = "cross-validation",
train = 0.8,
k = 5,
given = -1)
algorithms <- list(
popular = list(name = "POPULAR", param = NULL),
ubcf = list(name = "UBCF", param = NULL),
ibcf = list(name = "IBCF", param = NULL),
ar = list(name = "AR", param = NULL),
hybrid = list(name = "HYBRID", param =
list(recommenders = list(
popular = list(name = "POPULAR", param = NULL),
ubcf = list(name = "UBCF", param = NULL),
ibcf = list(name = "IBCF", param = NULL)
)
)
)
)
system.time({
ev_list <-
evaluate(x = es,
method = algorithms,
type = "topNList",
n = c(1,3,5,10))
})
names(ev_list)
plot(ev_list, legend="topleft", annotate=TRUE, main="ROC Curves of each model")
plot(ev_list[[1]], annotate=TRUE, main="ROC Curve of Popularity Model")
plot(x = ev_list, y = "prec/rec", annotate=TRUE, legend="topleft")
names(ev_list)
ibcf_eval <- avg(ev_list$ibcf) %>%
data.frame() %>%
arrange(recall)
pop_eval <- avg(ev_list$popular) %>%
data.frame() %>%
arrange(recall)
pracma::trapz(x = ibcf_eval$recall, y = ibcf_eval$recall)
pracma::trapz(x = pop_eval$recall, y = pop_eval$recall)
ke_ubcf = Recommender(data = MSWeb10, method = "UBCF")
ke_pop = Recommender(data = MSWeb10, method = "POPULAR")
ke_hyb = HybridRecommender(ke_ubcf, ke_pop)
pre = predict(ke_pop, MSWeb10[100:101], n=10)
# We can also use 5 because we saw it is the best threshold
rownames(MSWeb10[100:101])
pre = as(pre, "list")
pre
req_user_id <- c(3097,3164)
#rec_user_id <- c("^3097$","^3164$")
records <- c()
for(id in seq_along(req_user_id)){
records <- append(records,paste0("^",req_user_id,"$"))
}
records <- unique(records)
rec_nums <- which(grepl(x = rownames(MSWeb10),
pattern = paste0(records, collapse = "|")))
pre_flex <- predict(object = ke_pop,
newdata = MSWeb10[rec_nums],
n=5)
as(pre_flex, "list")
as(pre_flex,"list") %>%
data.frame() %>%
unnest() %>%
pivot_longer(cols = everything()) %>%
mutate(name = str_remove(name,"^X")) %>%
arrange(name)
pred_ratings <- predict(ke_pop, MSWeb10[rec_nums], type="ratings")
pred_ratings_list <- as(pred_ratings,"list")
item_name_vec <- c()
for(user in seq_along(pred_ratings_list)){
item_names <- names(pred_ratings_list[[user]])
item_name_vec <- append(item_name_vec, item_names)
}
preds_all <- pred_ratings_list %>%
tibble(user_id = names(.)) %>%
unnest(cols = ".") %>%
mutate(item = item_name_vec) %>%
rename(score = ".") %>%
mutate(business = sample(x = c("life","non-life","health","asset","banking"),
size = 541,
replace = TRUE,
prob = c(0.1,0.2,0.4,0.15,0.15))) %>%
select(user_id,item,business,score)
preds_all
preds_by_business <- preds_all %>%
group_by(user_id, business) %>%
arrange(desc(score), .by_group = TRUE) %>%
slice(1:3) %>%
ungroup()
preds_by_business
top_5 <- preds_all %>%
group_by(user_id) %>%
arrange(desc(score), .by_group = TRUE) %>%
slice(1:5)
top_5
# writexl::write_xlsx(list(by_business = preds_by_business,
#                          top_5 = top_5),
#                     "./pred_list_score.xlsx")
rec_weights <- crossing(m1 = seq(0,1,0.1),
m2 = seq(0,1,0.1)) %>%
mutate(weights = paste0(m1,",",m2)) %>%
pull(weights)
set.seed(123)
rec_weights_sample <- sample(rec_weights, 5)
recommenderRegistry$get_entry_names()
hybrids <-
list(hybrid = list(name = "HYBRID",
param = list(recommenders = list(popular = list(name = "POPULAR",
param = NULL),
ubcf = list(name = "UBCF",
param = NULL)),
weights = c(0.2,0.8))))
hybrids_list <- list()
for (w in seq_along(rec_weights_sample)){
hybrids_list[[w]] <- list(hybrid = list(name = "HYBRID",
param = list(recommenders = list(popular = list(name = "POPULAR",
param = NULL),
ubcf = list(name = "UBCF",
param = NULL)),
weights = as.numeric(strsplit(rec_weights_sample[[w]],",")[[1]])
)))
}
ev_hybrid <- list()
for(h in seq_along(hybrids_list)){
ev_hybrid[[h]] <- evaluate(es, hybrids_list[[h]], n = c(1,3,5,10))
}
class(ev_hybrid)
class(ev_hybrid[[1]])
for(p in seq_along(ev_hybrid)){
plot(x = ev_hybrid[[p]], y = "prec/rec")
}
# Check hybrid 01
test_ev <- evaluate(es, hybrids, n = c(1,3,5,10))
plot(test_ev, y = "prec/rec")
#predict(object = ke_pop, newdata = )
preds_all
preds_all %>%
count(business)
preds_all %>%
group_by(business) %>%
sample_n(size = 2, .by_group=TRUE)
preds_all %>%
group_by(business) %>%
sample_n(size = 2, .by_group=TRUE)
preds_all %>%
group_by(business) %>%
sample_n(size = 1, .by_group=TRUE)
preds_all %>%
group_by(business,user_id) %>%
sample_n(size = 1, .by_group=TRUE)
which(grepl(x = rownames(MSWeb10), pattern = "^3097$|^3164$"))
predict(object = ke_pop, newdata = MSWeb10[100:101])
as(predict(object = ke_pop, newdata = MSWeb10[100:101]),"list")
dim(preds_all)
as(MSWeb10,"list") %>%
tibble()
as(MSWeb10,"list") %>%
tibble(names(.))
as(MSWeb10,"list") %>%
tibble(user_id = names(.))
ms_purchases
ms_purchases %>%
count(purchase)
ms_purchases %>%
count(purchase) %>%
arrange(desc(n))
ms_purchases %>%
count(purchase)
preds_all
ms_purchases %>%
count(purchase) %>%
left_join(preds_all, by=c("purchase"="item"))
ms_purchases %>%
count(purchase) %>%
left_join(preds_all, by=c("purchase"="item")) %>%
select(purchase,business,n)
ms_purchases %>%
count(purchase) %>%
left_join(preds_all, by=c("purchase"="item")) %>%
select(purchase,business,n) %>%
arrange(desc(n))
ms_purchases %>%
count(purchase) %>%
left_join(preds_all, by=c("purchase"="item")) %>%
select(purchase,business,n) %>%
arrange(desc(n)) %>%
filter(!is.na(business))
ms_purchases %>%
count(purchase) %>%
left_join(preds_all, by=c("purchase"="item")) %>%
select(purchase,business,n) %>%
arrange(desc(n)) %>%
filter(!is.na(business)) %>%
group_by(business) %>%
slice(1:3)
save.image("./Showcase - dummy.RData")
length(item_name_vec)
q()
setwd("E:/Contracts/UAP/D - Working Papers/Cross-selling Model/models/Showcase")
knitr::purl("./Showcase - dummy.Rmd")
q()
